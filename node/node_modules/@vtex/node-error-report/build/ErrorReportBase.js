"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("crypto");
const errorParsing_1 = require("./errorParsing");
const cloneAndSanitizeObject_1 = require("./utils/cloneAndSanitizeObject");
const hrToMillis_1 = require("./utils/hrToMillis");
class ErrorReportBase extends Error {
    constructor(args) {
        var _a;
        const instantiationInitTime = process.hrtime();
        super((_a = args.message) !== null && _a !== void 0 ? _a : args.originalError.message);
        this.config = args.config;
        this.kind = args.kind;
        this.stack = this.cloneAndSanitize(args.originalError.stack);
        this.parsedInfo = this.cloneAndSanitize(errorParsing_1.parseError(args.originalError));
        this.details = this.cloneAndSanitize(args.details);
        const timestamp = new Date().toISOString();
        const metrics = { instantiationTime: '' };
        if (ErrorReportBase.isAlreadyParsedError(args.originalError)) {
            this.metadata = {
                metrics,
                timestamp,
                reportCount: args.originalError.errorReportMetadata.reportCount,
                errorId: args.originalError.errorReportMetadata.errorId,
            };
        }
        else {
            this.metadata = {
                metrics,
                timestamp,
                reportCount: 0,
                errorId: crypto_1.randomBytes(16).toString('hex'),
            };
            args.originalError.errorReportMetadata = {
                errorId: this.metadata.errorId,
                reportCount: 0,
            };
        }
        this.originalError = args.originalError;
        this.metadata.metrics.instantiationTime = hrToMillis_1.hrToMillis(process.hrtime(instantiationInitTime));
    }
    static isAlreadyParsedError(err) {
        return typeof err.errorReportMetadata === 'object';
    }
    markErrorAsReported() {
        this.originalError.errorReportMetadata.reportCount += 1;
        this.metadata.reportCount += 1;
    }
    isErrorReported() {
        this.metadata.reportCount = this.originalError.errorReportMetadata.reportCount;
        return this.metadata.reportCount > 0;
    }
    toObject() {
        const errorReportObj = {
            kind: this.kind,
            message: this.message,
            metadata: this.metadata,
            stack: this.stack,
            ...(this.details ? { details: this.details } : null),
            ...(this.parsedInfo ? { parsedInfo: this.parsedInfo } : null),
            ...(this.originalError.code ? { code: this.originalError.code } : null),
        };
        return errorReportObj;
    }
    cloneAndSanitize(obj) {
        return cloneAndSanitizeObject_1.cloneAndSanitizeObject(obj, this.config.maxStringLength, this.config.maxSerializationDepth);
    }
}
exports.ErrorReportBase = ErrorReportBase;
ErrorReportBase.MAX_ERROR_STRING_LENGTH = 1024;
ErrorReportBase.MAX_SERIALIZATION_DEPTH = 10;
