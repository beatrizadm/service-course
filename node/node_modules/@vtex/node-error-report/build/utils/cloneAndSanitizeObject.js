"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const is_stream_1 = __importDefault(require("is-stream"));
const tokenFields = ['authorization', 'authtoken', 'auth', 'token'];
const CIRCULAR_STR = '[circular]';
const ARRAY_STR = '[array]';
const OBJECT_STR = '[object]';
function sanitizeJwtToken(token) {
    const tokenParts = token.split('.');
    // JWT tokens are composed by three string parts
    // separated by '.'
    if (tokenParts.length !== 3) {
        return token;
    }
    return `${tokenParts[0]}.${tokenParts[1]}`;
}
exports.sanitizeJwtToken = sanitizeJwtToken;
function cloneAndSanitizeObject(element, maxStrSize, depth, seenObjects = [], currentKey) {
    if (element == null) {
        return element;
    }
    const objType = typeof element;
    if (objType === 'object') {
        if (seenObjects.includes(element)) {
            return CIRCULAR_STR;
        }
        if (Buffer.isBuffer(element)) {
            return { type: 'buffer', byteLength: Buffer.byteLength(element) };
        }
        if (is_stream_1.default(element)) {
            return { type: 'stream' };
        }
        if (depth === 0) {
            return Array.isArray(element) ? ARRAY_STR : OBJECT_STR;
        }
        seenObjects.push(element);
        const elementCopy = Array.isArray(element) ? [] : {};
        Object.keys(element).forEach((key) => {
            // seenObjects.slice creates a copy of seenObjects at the current state
            elementCopy[key] = cloneAndSanitizeObject(element[key], maxStrSize, depth - 1, seenObjects.slice(), key);
        });
        return elementCopy;
    }
    if (objType === 'string') {
        const currentKeyNormalized = currentKey === null || currentKey === void 0 ? void 0 : currentKey.toLowerCase();
        if (currentKeyNormalized && tokenFields.includes(currentKeyNormalized)) {
            element = sanitizeJwtToken(element);
        }
        return element.length <= maxStrSize ? element : `${element.substr(0, maxStrSize)}[...TRUNCATED]`;
    }
    if (objType === 'number' || objType === 'bigint' || objType === 'boolean' || objType === 'symbol') {
        return element;
    }
    if (objType === 'function') {
        return `[function: ${element.name || 'anonymous'}]`;
    }
    return `[${objType}]`;
}
exports.cloneAndSanitizeObject = cloneAndSanitizeObject;
