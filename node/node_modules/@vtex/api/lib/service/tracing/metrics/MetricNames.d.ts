declare const enum METRIC_TYPES {
    /** Counter is monotonic */
    COUNTER = "counter",
    /** Gauge is a counter that can be increased and decreased */
    GAUGE = "gauge",
    /** Histogram creates a counter timeseries for each bucket specified */
    HISTOGRAM = "histogram"
}
export declare const enum RequestsMetricLabels {
    /** The status code for the HTTP request */
    STATUS_CODE = "status_code",
    /** The service.json handler name for the current request (e.g. 'public-handler:render') */
    REQUEST_HANDLER = "handler"
}
export declare const enum EventLoopMetricLabels {
    PERCENTILE = "percentile"
}
export declare const CONCURRENT_REQUESTS: {
    name: string;
    help: string;
    type: METRIC_TYPES;
};
export declare const REQUESTS_TOTAL: {
    name: string;
    help: string;
    labelNames: RequestsMetricLabels[];
    type: METRIC_TYPES;
};
export declare const REQUESTS_ABORTED: {
    name: string;
    help: string;
    labelNames: RequestsMetricLabels[];
    type: METRIC_TYPES;
};
export declare const REQUEST_TIMINGS: {
    name: string;
    help: string;
    labelNames: RequestsMetricLabels[];
    buckets: number[];
    type: METRIC_TYPES;
};
export declare const REQUEST_RESPONSE_SIZES: {
    name: string;
    help: string;
    labelNames: RequestsMetricLabels[];
    buckets: number[];
    type: METRIC_TYPES;
};
export declare const BETWEEN_SCRAPES_EVENT_LOOP_LAG_MAX: {
    name: string;
    help: string;
    type: METRIC_TYPES;
};
export declare const BETWEEN_SCRAPES_EVENT_LOOP_LAG_PERCENTILES: {
    name: string;
    help: string;
    labelNames: EventLoopMetricLabels[];
    type: METRIC_TYPES;
};
export {};
