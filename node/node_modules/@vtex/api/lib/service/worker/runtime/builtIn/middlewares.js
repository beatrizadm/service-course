"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const prom_client_1 = require("prom-client");
const metricsLogger_1 = require("../../../logger/metricsLogger");
const EventLoopLagMeasurer_1 = require("../../../tracing/metrics/measurers/EventLoopLagMeasurer");
const recorder_1 = require("../utils/recorder");
async function recorderMiddleware(ctx, next) {
    const recorder = new recorder_1.Recorder();
    ctx.state.recorder = recorder;
    await next();
    recorder.flush(ctx);
    return;
}
exports.recorderMiddleware = recorderMiddleware;
exports.addMetricsLoggerMiddleware = () => {
    const metricsLogger = new metricsLogger_1.MetricsLogger();
    return (ctx, next) => {
        ctx.metricsLogger = metricsLogger;
        return next();
    };
};
exports.prometheusLoggerMiddleware = () => {
    prom_client_1.collectDefaultMetrics();
    const eventLoopLagMeasurer = new EventLoopLagMeasurer_1.EventLoopLagMeasurer();
    eventLoopLagMeasurer.start();
    return async (ctx, next) => {
        var _a;
        if (ctx.request.path !== '/metrics') {
            return next();
        }
        (_a = ctx.tracing) === null || _a === void 0 ? void 0 : _a.currentSpan.setOperationName('builtin:prometheus-metrics');
        await eventLoopLagMeasurer.updateInstrumentsAndReset();
        ctx.set('Content-Type', prom_client_1.register.contentType);
        ctx.body = prom_client_1.register.metrics();
        ctx.status = 200;
    };
};
